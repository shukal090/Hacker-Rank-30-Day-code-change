#DAY 13 Abstract classes

from abc import ABCMeta, abstractmethod
class Book(object, metaclass=ABCMeta):
    def __init__(self,title,author):
        self.title=title
        self.author=author   
    @abstractmethod
    def display(): pass

#Write MyBook class
class MyBook(Book):
    def __init__(self, title, author, price):
        Book.__init__(self, title, author)
        self.price =price
    def display(self):
        print('Title: ' + self.title)
        print('Author: ' + self.author)
        print('Price: ' + str(self.price))

title=input()
author=input()
price=int(input())
new_novel=MyBook(title,author,price)
new_novel.display()

#Day 14 Scope

class Difference:
    def __init__(self, a):
        self.__elements = a
	# Add your code here
        self.maximumDifference=0
    def computeDifference(self):
        min_element=101
        max_element=0
        for element in self.__elements:
            if element < min_element:
                min_element=element
            if element > max_element:
                max_element= element

        self.maximumDifference=max_element-min_element

# End of Difference class

_ = input()
a = [int(e) for e in input().split(' ')]

d = Difference(a)
d.computeDifference()

print(d.maximumDifference)

#Day 15 Linked List

class Node:
    def __init__(self,data):
        self.data = data
        self.next = None 
class Solution: 
    def display(self,head):
        current = head
        while current:
            print(current.data,end=' ')
            current = current.next

    def insert(self,head,data):
        newNode=Node(data)
        if not head:
            return newNode

        current = head
        while current.next:
            current = current.next
        current.next=newNode
        return head 
    #Complete this method

mylist= Solution()
T=int(input())
head=None
for i in range(T):
    data=int(input())
    head=mylist.insert(head,data)    
mylist.display(head); 	  

